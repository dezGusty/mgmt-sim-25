name: Simple Auto Version

on:
  push:
    branches: [main, AutoVersioningTesting]

jobs:
  version:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Configure Git
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"

      - name: Get current version and increment
        id: version
        run: |
          CURRENT_VERSION=$(cat VERSION)
          echo "Current version: $CURRENT_VERSION"
          
          # Split version into parts
          IFS='.' read -ra VERSION_PARTS <<< "$CURRENT_VERSION"
          MAJOR=${VERSION_PARTS[0]}
          MINOR=${VERSION_PARTS[1]}
          PATCH=${VERSION_PARTS[2]}
          
          # Different versioning for different branches
          if [[ "${{ github.ref_name }}" == "main" ]]; then
            # Main branch: increment patch version
            PATCH=$((PATCH + 1))
            NEW_VERSION="$MAJOR.$MINOR.$PATCH"
            TAG_NAME="v$NEW_VERSION"
          else
            # Other branches: add branch name and build number
            NEW_VERSION="$CURRENT_VERSION"
            TAG_NAME="v$NEW_VERSION-${{ github.ref_name }}-${{ github.run_number }}"
          fi
          
          echo "New version: $NEW_VERSION"
          echo "Tag name: $TAG_NAME"
          echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT
          echo "tag_name=$TAG_NAME" >> $GITHUB_OUTPUT
          echo "is_main=${{ github.ref_name == 'main' }}" >> $GITHUB_OUTPUT

      - name: Update VERSION file
        if: steps.version.outputs.is_main == 'true'
        run: |
          NEW_VERSION="${{ steps.version.outputs.new_version }}"
          echo "$NEW_VERSION" > VERSION
          git add VERSION
          git commit -m "Version bump to $NEW_VERSION [skip ci]"
          git push origin ${{ github.ref_name }}

      - name: Create and push tag
        run: |
          TAG_NAME="${{ steps.version.outputs.tag_name }}"
          git tag "$TAG_NAME"
          git push origin "$TAG_NAME"

      - name: Create Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.version.outputs.tag_name }}
          name: ${{ steps.version.outputs.is_main == 'true' && 'Release' || 'Test Build' }} ${{ steps.version.outputs.tag_name }}
          body: |
            ## ${{ steps.version.outputs.is_main == 'true' && 'Release' || 'Test Build' }} ${{ steps.version.outputs.tag_name }}
            
            üìù **Branch:** `${{ github.ref_name }}`
            
            üöÄ **Docker Images:**
            - Backend: `ghcr.io/${{ github.repository }}-backend:${{ steps.version.outputs.tag_name }}`
            - Frontend: `ghcr.io/${{ github.repository }}-frontend:${{ steps.version.outputs.tag_name }}`
            
            üì¶ **Quick Deploy:**
            ```bash
            export VERSION=${{ steps.version.outputs.tag_name }}
            docker-compose -f docker-compose.prod.yml up -d
            ```
            
            ${{ steps.version.outputs.is_main != 'true' && '‚ö†Ô∏è **This is a test build from a development branch**' || '' }}
          generate_release_notes: true
          prerelease: ${{ steps.version.outputs.is_main != 'true' }}